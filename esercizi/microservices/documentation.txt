Per lo sviluppo delle funzionalità richieste si sono valutate due possibili soluzioni:

1) L'implementazione di 4 microservizi, responsabili della conversione da un formato ai 3 rimanenti

    HexConverter        RGBConverter
    -> To RGB           -> to Hex
    -> To HSL           -> to HSL
    -> To CMYK          -> to CMYK

    HSLConverter        CMYKConverter
    -> To RGB           -> to Hex
    -> To Hex           -> to HSL
    -> To CMYK          -> to RGB

2) L'implementazione di 6 microservizi e l'utilizzo della composizione tra gli stessi per garantire tutte le funzionalità

    Microservizi stand-alone     ||    Funzionalità realizzate per composizione

    HSL -> RGB  ;  HSL -> Hex    ||    CMYK -> HSL -> RGB ; CMYK -> HSL -> HEX 
 
    RGB -> HSL ;  Hex -> HSL     ||    RGB -> HSL -> CMYK ; RGB -> HSL -> HEX 
    
    HSL -> CMYK  ;  CMYK -> HSL  ||    Hex -> HSL -> RGB  ; Hex -> HSL  -> CMYK


Si è scelta la seconda implementazione per via della maggiore granularità e del miglior controllo sulle implementazioni,
preferendo l'utilizzo di un un approccio modulare per garantire tutte le funzionalità richieste.
Quest'ultimo permette anche di ridurre l'accoppiamento tra i vari microservizi, facendo in modo che il fallimento del singolo impatti di meno sull'operato di altri.

In generale, maggiore è il numero di microservizi implementati in modo indipendente, come conversione diretta da un formato ad un altro,
maggiore è il grado di indipendenza che è possibile ottenere, a spese di un maggior dispendio di risorse ed utilizzo di un maggior numero di container.